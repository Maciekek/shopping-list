// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("userId")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  lists         ListsOnUsers[]

  @@map("users")
}

model List {
  id                      String    @id @default(cuid())
  name                    String                    @db.VarChar(100)
  items                   Json?                     @db.Json
  ownerId                 String?
  users                   ListsOnUsers[]
  share                   ShareList?

  @@map("lists")
}

model ListsOnUsers {
   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId     String
   list       List      @relation(fields: [listId], references: [id], onDelete: Cascade)
   listId     String

  @@id([userId, listId])
}

model ShareList {
  id         String    @id @default(cuid())
  type       SharedListType
  list       List      @relation(fields: [listId], references: [id])
  listId     String    @unique
  token      String    @unique

  @@map("shareLists")
}

enum SharedListType {
  READ
  WRITE
}



